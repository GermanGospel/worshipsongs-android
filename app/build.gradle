plugins {
    id "org.sonarqube" version "1.2"
}
apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply from: '../sonarqube.gradle'

def APP_VERSION = getCurrentVersionName()
ext.set('AppVersion', APP_VERSION)

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"
    defaultConfig {
        applicationId "org.worshipsongs"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode System.getenv("BUILD_NUMBER") as Integer ?: 12
        versionName APP_VERSION
    }

    signingConfigs {
        releaseConfig {
            storeFile file('../worshipsongs-key.jks')
            storePassword System.getenv('WORSHIPSONGS_KEYSTOREPWD')
            keyAlias System.getenv('WORSHIPSONGS_KEYALIAS')
            keyPassword System.getenv('WORSHIPSONGS_KEYPASSWORD')
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.releaseConfig
            testCoverageEnabled false
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFile = new File(output.outputFile.parent, "worshipsongs-" + defaultConfig.versionName + ".apk")
                }
            }
        }
        debug {
            minifyEnabled false
            testCoverageEnabled true
            signingConfig signingConfigs.releaseConfig
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFile = new File(output.outputFile.parent, "worshipsongs-" + defaultConfig.versionName + ".apk")
                }
            }
        }
    }
    packagingOptions {

        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

}

def getCurrentVersionName() {
    def gradlePropertyFile = file('../version.properties')
    def majorVersion
    def minorVersion
    def currentVersionName = "2.91"
    if (gradlePropertyFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(gradlePropertyFile))
        majorVersion = versionProps['MAJOR_VERSION'] ?: "3"
        minorVersion = System.getenv("BUILD_NUMBER") ?: versionProps["MINOR_VERSION"] ?: "91"
        def currentBranch = System.getenv("BRANCH")?:"development"
        if (currentBranch.toLowerCase().contains("development")) {
            currentVersionName = majorVersion + "." + minorVersion
            versionProps['MAJOR_VERSION'] = majorVersion
            versionProps["MINOR_VERSION"] = minorVersion
            versionProps.store(gradlePropertyFile.newWriter(), null)
        } else {
            currentVersionName = majorVersion+"."+versionProps["MINOR_VERSION"]
        }

    }
    return currentVersionName
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/robotium-solo-2.5.jar')
    compile files('libs/YouTubeAndroidPlayerApi.jar')
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'com.android.support:appcompat-v7:23.3.0'
    // Navigation drawer dependencies
    compile 'it.neokree:MaterialNavigationDrawer:1.3.3'
    compile 'com.google.android.gms:play-services:7.0.0'
    // cardview and recyclerview
    compile 'net.margaritov.preference.colorpicker.ColorPickerPreference:ColorPickerPreference:1.0.0'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.getbase:floatingactionbutton:1.10.1'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test:runner:0.3') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testCompile 'org.robolectric:robolectric:3.2.2'
}

//Jacoco configuration
jacoco {
    // https://github.com/jacoco/jacoco/issues/288
    toolVersion = "0.7.5.201505241946"
}

def coverageSourceDirs = ['../app/src']
task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*','**/**Test*']
    )
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

//def flavor = "develop"
//def Flavor = "Develop"
//
////Sonar qube configuration
//sonarqube {
//    properties {
//        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-23/android.jar," +
//                "build/intermediates/exploded-aar/**/classes.jar"
//        property "sonar.host.url", "http://172.19.10.207:9000/sonar"
//        property "sonar.projectName", "worshipsongs"
//        property "sonar.projectKey", "worshipsongs"
//        property "sonar.projectVersion", getCurrentVersionName()
//
//        property "sonar.sourceEncoding","UTF-8"
//        property "sonar.sources", "src/main/java,src/main/res"
//        property "sonar.binaries", "build/intermediates/classes/${flavor}/debug"
//        property "sonar.libraries", libraries
//        property "sonar.java.binaries", "build/intermediates/classes/${flavor}/debug"
//        property "sonar.java.libraries", libraries
//
//        property "sonar.tests", "src/test/java" // where the tests are located
//        property "sonar.java.test.binaries", "build/intermediates/classes/${flavor}/debug"
//        property "sonar.java.test.libraries", libraries
//
//        property "sonar.jacoco.reportPath", "build/jacoco/test${Flavor}DebugUnitTest.exec" // path to coverage reports
//        property "sonar.java.coveragePlugin", "jacoco"
//        property "sonar.junit.reportsPath", "build/test-results/${flavor}Debug" // path to junit reports
//        property "sonar.android.lint.report", "build/outputs/lint-results-${flavor}Debug.xml"
//    }
//}
//import org.gradle.internal.os.OperatingSystem;
//
//task sonarComplete(type: Exec) {
//    workingDir "./"
//    def command = "../gradlew"
//    if (OperatingSystem.current().isWindows()) {
//        command = command + ".bat"
//    }
//    commandLine command, "clean", "assemble${Flavor}Debug", "lint${Flavor}Debug", "jacocoTest${Flavor}DebugUnitTestReport", "sonarqube"
//}




